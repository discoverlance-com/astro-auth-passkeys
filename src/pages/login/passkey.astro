---
export const prerender = false;

import Layout from "@/layouts/Layout.astro";
import { Button } from "@/components/react/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/react/ui/card";
import { Input } from "@/components/react/ui/input";
import { Label } from "@/components/react/ui/label";
---

<Layout title="Login With Passkey">
  <main class="flex-1">
    <section class="w-full py-12 md:py-24 lg:py-32 xl:py-48">
      <div class="container px-4 md:px-6">
        <Card className="mx-auto max-w-sm">
          <CardHeader>
            <CardTitle className="text-2xl" transition:name="auth-header"
              >Login With Passkey</CardTitle
            >
            <CardDescription transition:name="auth-header-desc">
              Enter your email below to login to your account with your passkey.
              A new passkey will be created if you don&apos;t already have one
              setup for this website.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div class="grid gap-4">
              <div class="grid gap-2">
                <Label htmlFor="username">Enter your email</Label>
                <Input
                  id="username"
                  type="text"
                  placeholder="m@example.com"
                  required
                  autoComplete="username webauthn"
                />
              </div>

              <Button className="w-full"> Next </Button>
            </div>
            <div class="mt-4 text-center text-sm">
              Don&apos;t have an account?{" "}
              <a href="/register" class="underline"> Sign up </a>
            </div>
            <div class="mt-2 text-center text-sm">
              Don&apos;t have access to use passkeys?{" "}
              <a href="/login" class="underline"> Login with email </a>
            </div>
          </CardContent>
        </Card>
      </div>
    </section>
  </main>
</Layout>

<script>
  async function getAuthenticationOptions(): Promise<PublicKeyCredentialRequestOptions> {
    const options: PublicKeyCredentialRequestOptions = {};

    return options;
  }
  (async () => {
    if (
      typeof window.PublicKeyCredential !== "undefined" &&
      typeof window.PublicKeyCredential.isConditionalMediationAvailable ===
        "function"
    ) {
      const available =
        await PublicKeyCredential.isConditionalMediationAvailable();

      if (available) {
        try {
          // Retrieve authentication options for `navigator.credentials.get()`
          // from your server.
          const authOptions = await getAuthenticationOptions();
          // This call to `navigator.credentials.get()` is "set and forget."
          // The Promise will only resolve if the user successfully interacts
          // with the browser's autofill UI to select a passkey.
          const webAuthnResponse = await navigator.credentials.get({
            mediation: "conditional",
            publicKey: {
              ...authOptions,
              // see note about userVerification below
              userVerification: "preferred",
            },
          });
          // Send the response to your server for verification and
          // authenticate the user if the response is valid.
          await verifyAutoFillResponse(webAuthnResponse);
        } catch (err) {
          console.error("Error with conditional UI:", err);
        }
      }
    }
  })();
</script>
